package Analizadores;
import java_cup.runtime.*;
import proyecto1c1.*;

parser code
{:
    public static nodo raiz;
    public static nodo raiz2;
    public static nodo numeral;
    public int contador=0;
    public int hoja=1;
    public int cant = 0;

    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        error nuevoe = new error("Tipo Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Interface.Errores.add(nuevoe);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        error nuevoe = new error("Tipo Sintactico", s.value.toString(), s.right+1, s.left+1);
        Interface.Errores.add(nuevoe);
    }
:}

terminal String especial, letraexp, cadena, conj, coma, comilladoble, admiracion, numeral, dolar;
terminal String porcentaje, ampersand, comillasimple, parentesisabre,parentesiscierra, asterisco, suma, menos;
terminal String punto, barrainclinada, dospuntos, puntocoma, menor, igual, mayor, interrogacion;
terminal String arroba, corchetesabre, corchetescierra, elevado, guionbajo, acentograve;
terminal String llavesabre, barravertical, llavescierra, pestan;
terminal String identificador, letra, entero, casa, casb, casc;

non terminal INICIO;
non terminal conjunto CONJUNTO;
non terminal String CUERPOCONJUNTO;
non terminal String LISTA;
non terminal String CUERPO1;
non terminal String CUERPO2;
non terminal nodo REGULAR;
non terminal Entradas VALIDARCADENA;
non terminal nodo EXPRESIONES;
non terminal String VALOR;

start with INICIO;

INICIO::=llavesabre CUERPO1 porcentaje porcentaje porcentaje porcentaje CUERPO2 llavescierra {:System.out.println("Funciono");:};

CUERPO1::=CUERPO1 CONJUNTO
         |CUERPO1 REGULAR
         |CONJUNTO
         |REGULAR;

CUERPO2::=CUERPO2 VALIDARCADENA
         |VALIDARCADENA;

CONJUNTO::=conj dospuntos identificador:var1 menos mayor CUERPOCONJUNTO:var2 puntocoma {:RESULT=new conjunto(var1,var2,null); Interface.Conjuntos.add(RESULT);:};

VALIDARCADENA::=identificador:var1 dospuntos cadena:var2 puntocoma {:RESULT=new Entradas(var1,var2); Interface.Entradas.add(RESULT);:};

REGULAR::=identificador:var2 menos mayor EXPRESIONES:var1 puntocoma {:parser.raiz = var1; numeral = new nodo(null,null,"#",String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),"","",parser.contador); parser.contador++;if(raiz.anulable=="A"){raiz2 = new nodo(raiz,numeral,".","0","N",raiz.ant+","+numeral.ant,numeral.sig,"","",parser.contador);}else{raiz2 = new nodo(raiz,numeral,".","0","N",raiz.ant,numeral.sig,"","",parser.contador);}  parser.contador++; hoja = 1; contador = 0; Interface.Arboles.add(raiz2); Interface.NombresA.add(var2); parser.cant = 0;:};

EXPRESIONES::= punto EXPRESIONES:var1 EXPRESIONES:var2              {:if(var1.anulable=="A" && var2.anulable=="A"){RESULT=new nodo(var1, var2, ".","0","A",var1.ant+","+var2.ant,var1.sig+","+var2.sig,var1.fin,var2.inicio, parser.contador);}else if(var1.anulable=="A" && var2.anulable=="N"){RESULT=new nodo(var1, var2, ".","0","N",var1.ant+","+var2.ant,var2.sig,var1.fin,var2.inicio, parser.contador);}else if(var1.anulable=="N" && var2.anulable=="A"){RESULT=new nodo(var1, var2, ".","0","N",var1.ant,var1.sig+","+var2.sig,var1.fin,var2.inicio, parser.contador);}else if(var1.anulable=="N" && var2.anulable=="N"){RESULT=new nodo(var1, var2, ".","0","N",var1.ant,var2.sig,var1.fin,var2.inicio, parser.contador);} parser.contador++;:}
              |barravertical EXPRESIONES:var1 EXPRESIONES:var2      {:if(var1.anulable=="A" || var2.anulable=="A"){RESULT=new nodo(var1, var2,"\\"+"|","0","A",var1.ant+","+var2.ant,var1.sig+","+var2.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador);}else{RESULT=new nodo(var1, var2,"\\"+"|","0","N",var1.ant+","+var2.ant,var1.sig+","+var2.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador);} parser.contador++; parser.cant = parser.cant + 2;:}
              |suma EXPRESIONES:var1                                {:if(var1.anulable=="N"){RESULT=new nodo(var1, null, "+","0","N",var1.ant,var1.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador);}else{RESULT=new nodo(var1, null, "+","0","A",var1.ant,var1.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador);} parser.contador++; parser.cant = parser.cant + 2;:}
              |asterisco EXPRESIONES:var1                           {:RESULT=new nodo(var1, null, "*","0","A",var1.ant,var1.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.cant = parser.cant + 2;:}
              |interrogacion EXPRESIONES:var1                       {:RESULT=new nodo(var1, null, "?","0","A",var1.ant,var1.sig,String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.cant = parser.cant + 2;:}
              |letraexp:var1                                        {:RESULT=new nodo(null, null, var1,String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.hoja++; parser.cant = parser.cant + 2;:}
              |cadena:var1                                          {:RESULT=new nodo(null, null, var1,String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.hoja++; parser.cant = parser.cant + 2;:}
              |entero:var1                                          {:RESULT=new nodo(null, null, var1,String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.hoja++; parser.cant = parser.cant + 2;:}
              |especial:var1                                        {:RESULT=new nodo(null, null,"\\"+var1,String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.hoja++; parser.cant = parser.cant + 2;:}
              |llavesabre identificador:var1 llavescierra           {:RESULT=new nodo(null, null, var1,String.valueOf(parser.hoja),"N",String.valueOf(parser.hoja),String.valueOf(parser.hoja),String.valueOf(parser.cant),String.valueOf(parser.cant+1), parser.contador); parser.contador++; parser.hoja++; parser.cant = parser.cant + 2;:}
;

CUERPOCONJUNTO::= LISTA:var1                    {:RESULT=var1;:}
                 |casa:var1                     {:RESULT=var1;:}
                 |casb:var1                     {:RESULT=var1;:}
                 |casc:var1                     {:RESULT=var1;:}
                 |VALOR:var1 pestan:var3 VALOR:var2  {:RESULT=var1+var3+var2;:}
;

LISTA  ::= LISTA:var1 coma:var3 letra:var2           {:RESULT=var1 + var3 + var2;:}
          |LISTA:var1 coma:var3 entero:var2          {:RESULT=var1 + var3 + var2;:}
          |LISTA:var1 coma:var3 especial:var2        {:RESULT=var1 + var3 + var2;:}
          |letra:var1                           {:RESULT=var1;:}
          |entero:var1                          {:RESULT=var1;:}
          |especial:var1                        {:RESULT=var1;:};

VALOR::=coma:var1                       {:RESULT=var1;:}
       |letra:var1                      {:RESULT=var1;:}
       |entero:var1                     {:RESULT=var1;:}
       |comilladoble:var1               {:RESULT=var1;:}
       |admiracion:var1                 {:RESULT=var1;:}
       |numeral:var1                    {:RESULT=var1;:}
       |dolar:var1                      {:RESULT=var1;:}
       |porcentaje:var1                 {:RESULT=var1;:}
       |ampersand:var1                  {:RESULT=var1;:}
       |comillasimple:var1              {:RESULT=var1;:}
       |parentesisabre:var1             {:RESULT=var1;:}
       |parentesiscierra:var1           {:RESULT=var1;:}
       |asterisco:var1                  {:RESULT=var1;:}
       |suma:var1                       {:RESULT=var1;:}
       |menos:var1                      {:RESULT=var1;:}
       |punto:var1                      {:RESULT=var1;:}
       |barrainclinada:var1             {:RESULT=var1;:}
       |dospuntos:var1                  {:RESULT=var1;:}
       |puntocoma:var1                  {:RESULT=var1;:}
       |menor:var1                      {:RESULT=var1;:}
       |igual:var1                      {:RESULT=var1;:}
       |mayor:var1                      {:RESULT=var1;:}
       |interrogacion:var1              {:RESULT=var1;:}
       |arroba:var1                     {:RESULT=var1;:}
       |corchetesabre:var1              {:RESULT=var1;:}
       |corchetescierra:var1            {:RESULT=var1;:}
       |elevado:var1                    {:RESULT=var1;:}
       |guionbajo:var1                  {:RESULT=var1;:}
       |acentograve:var1                {:RESULT=var1;:}
       |llavesabre:var1                 {:RESULT=var1;:}
       |barravertical:var1              {:RESULT=var1;:}
       |especial:var1                   {:RESULT=var1;:}
       |llavescierra:var1               {:RESULT=var1;:};
